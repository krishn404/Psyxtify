import { getUserProfile, getTopTracks, getTopArtists, getTopGenres, setAccessToken } from "../components/SpotifyAPI";
import { useState, useEffect, useRef } from "react";

import { toPng } from 'html-to-image';
import { createGradientWavy } from "../../helpers/ColorGradient";
import ColorThief from 'colorthief';

import Skeleton from "react-loading-skeleton";
import 'react-loading-skeleton/dist/skeleton.css';

function TopSongs() {
    const [userName, setUserName] = useState(null);
    const [profileImage, setProfileImage] = useState(null);
    const [userFollowers, setUserFollowers] = useState(null);
    const [userPlaylists, setUserPlaylists] = useState(null);
    const [userFollowing, setUserFollowing] = useState(null);
    const [showProfileDetails, setShowProfileDetails] = useState(false);

    const [topTracks, setTopTracks] = useState([]);
    const [topArtists, setTopArtists] = useState([]);
    const [topGenres, setTopGenres] = useState([]);
    const [selectedOption, setSelectedOption] = useState('tracks');

    const [timeRange, setTimeRange] = useState('short_term'); // default to last month

    const [simpleModeEnabled, enableSimpleMode] = useState(false);
    const handleSimpleModeChange = () => {
      enableSimpleMode(!simpleModeEnabled);
    }

    const [showAlbumInstead, setShowAlbum] = useState(false);
    const handleShowAlbum = () => {
      setShowAlbum(!showAlbumInstead);
    }

    const [limit, setLimit] = useState(10); // Default limit
    const handleLimitChange = (event) => {
      setLimit(parseInt(event.target.value, 10));
    };

    const [backgroundGradient, setBackgroundGradient] = useState('');

    const containerRef = useRef(null); // Ref for the container

    useEffect(() => {
      const accessToken = localStorage.getItem('spotifyAccessToken');
      if (accessToken) {
        setAccessToken(accessToken);
        fetchData(accessToken, selectedOption, timeRange);
      }
    }, [selectedOption, limit]);

    useEffect(() => {
      if (selectedOption === 'tracks' && topTracks.length > 0) {
        extractColorsFromImage(topTracks[0].album.images[0].url);
      } else if (selectedOption === 'artists' && topArtists.length > 0) {
        extractColorsFromImage(topArtists[0].images[0]?.url);
      }
    }, [topTracks, topArtists]);

    const fetchData = async (accessToken, option, timeRange) => {
      try {
        if (option === 'tracks') {
          const tracks = await getTopTracks(accessToken, limit, timeRange);
          setTopTracks(tracks);
          setTopArtists([]);
          setTopGenres([]);
        } else if (option === 'artists') {
          const artists = await getTopArtists(accessToken, limit, timeRange);
          setTopArtists(artists);
          setTopTracks([]);
          setTopGenres([]);
        } else if (option === 'genres') {
          const genres = await getTopGenres(timeRange);
          setTopGenres(genres);
          setTopTracks([]);
          setTopArtists([]);
        }
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    const handleTimeRangeChange = (range) => {
      const accessToken = localStorage.getItem('spotifyAccessToken');

      setTimeRange(range);
      fetchData(accessToken, selectedOption, range); // Re-fetch data with the new range
    };

    const formatDuration = (ms) => {
      const minutes = Math.floor(ms / 60000);
      const seconds = ((ms % 60000) / 1000).toFixed(0);
      return `${minutes}:${(seconds < 10 ? '0' : '')}${seconds}`;
    };

    const extractColorsFromImage = (imageUrl) => {
      if (!imageUrl) return;
      const img = new Image();
      img.crossOrigin = 'Anonymous';
      img.src = imageUrl;
      img.onload = () => {
        const colorThief = new ColorThief();
        const colors = colorThief.getPalette(img, 5);
        setBackgroundGradient(createGradientWavy(colors));
      };
    };

    const exportImage = () => {
      if (containerRef.current) {
        toPng(containerRef.current, { backgroundColor: '#0D0D0D' })
          .then((dataUrl) => {
            const link = document.createElement('a');
            link.download = 'top-tracks-artists.png';
            link.href = dataUrl;
            link.click();
          })
          .catch((error) => {
            console.error('Error exporting image:', error);
          });
      }
    };

    useEffect(() => {
      const accessToken = localStorage.getItem('spotifyAccessToken');
      if (accessToken) {
        getUserProfile(accessToken)
          .then(({ userName, profileImage, followers, playlists, following }) => {
            setUserName(userName);
            setProfileImage(profileImage);
            setUserFollowers(followers);
            setUserPlaylists(playlists);
            setUserFollowing(following);
          })
          .catch(error => console.error('Error fetching user profile:', error));
      }
    }, []);

    const handleProfileImageClick = () => {
      setShowProfileDetails(!showProfileDetails);
    };

    return (
      <div className="flex justify-center h-full content-center flex-col lg:flex-row lg:p-8 pb-12">
        <div className="flex flex-col gap-3 p-8">
          <h1 className="text-3xl">Customize your chart</h1>
          <select className="select w-full max-w-xs"
            defaultValue={selectedOption}
            onChange={(e) => setSelectedOption(e.target.value)}
          >
            <option value="tracks">Top Songs</option>
            <option value="artists">Top Artists</option>
            <option value="genres">Top Genres</option>
          </select>

          <div className="form-control w-full">
            <label className="label cursor-pointer">
              <span className="label-text">Simple Mode</span>
              <input type="checkbox" className="toggle toggle-secondary" checked={simpleModeEnabled} onChange={handleSimpleModeChange} disabled={selectedOption === 'genres'} />
            </label>
          </div>

          <div className="form-control w-full">
            <label className="label cursor-pointer">
              <span className="label-text">Display album instead of artist</span>
              <input type="checkbox" className="toggle toggle-secondary" checked={showAlbumInstead} onChange={handleShowAlbum} />
            </label>
          </div>
          <div className="divider">Time Period</div>
          <button className="btn btn-outline btn-neutral" onClick={() => handleTimeRangeChange('short_term')}>Last Month</button>
          <button className="btn btn-outline btn-neutral" onClick={() => handleTimeRangeChange('medium_term')}>Last 6 Months</button>
          <button className="btn btn-outline btn-neutral" onClick={() => handleTimeRangeChange('long_term')}>All Time</button>
          <div className="divider"></div>
          <label htmlFor="limit" className="block mb-2">Number of {selectedOption === 'tracks' ? 'Tracks' : 'Artists'} {limit}</label>
          <input
            type="range"
            id="limit"
            name="limit"
            min="1"
            max="50"
            value={limit}
            onChange={handleLimitChange}
            className="w-full mb-4 range"
          />
          <button className="btn btn-outline btn-neutral" onClick={exportImage}>Export Image</button>
        </div>

        {userName &&
          <div className="flex flex-col lg:flex-row lg:gap-8">
            <div className="max-w-screen-lg w-full rounded-lg p-4" style={{ backgroundImage: backgroundGradient }} ref={containerRef}>
              <div className="py-4 lg:p-4">
                <div className="flex justify-between items-center">
                  <h1 className="text-3xl font-bold">
                    {timeRange === 'short_term' && 'LAST MONTH'}
                    {timeRange === 'medium_term' && 'LAST SIX MONTHS'}
                    {timeRange === 'long_term' && 'ALL TIME'}
                  </h1>
                  <span className="text-sm text-right">stats by psyxtify</span>
                </div>
                <h1 className="text-2xl">
                  <span className="text-secondary">{userName}'s</span> Top
                  {selectedOption === 'tracks' && ' songs'}
                  {selectedOption === 'artists' && ' artists'}
                  {selectedOption === 'genres' && ' genres'}
                </h1>
              </div>

              {!simpleModeEnabled &&
                <div className="grid grid-cols-1 gap-1 lg:gap-4 lg:p-4 lg:grid-cols-2">
                  {selectedOption === 'tracks' && topTracks.map((track, index) => (
                    <div key={track.id} className="card lg:card-side card-bordered card-compact bg-base-300 shadow-sm">
                      <div className="card-body p-4">
                        <h2 className="card-title">
                          <span className="text-sm opacity-50">#{index + 1}</span>
                          {track.name}
                        </h2>
                        {track.album.images.length > 0 && (
                          <figure>
                            <img src={track.album.images[0].url} alt={track.name} />
                          </figure>
                        )}
                        <p className="opacity-50">
                          {showAlbumInstead ? track.album.name : track.artists[0].name}
                        </p>
                        <div className="card-actions justify-between items-center">
                          <span className="opacity-50 text-sm">Duration: {formatDuration(track.duration_ms)}</span>
                        </div>
                      </div>
                    </div>
                  ))}
                  {selectedOption === 'artists' && topArtists.map((artist, index) => (
                    <div key={artist.id} className="card lg:card-side card-bordered card-compact bg-base-300 shadow-sm">
                      <div className="card-body p-4">
                        <h2 className="card-title">
                          <span className="text-sm opacity-50">#{index + 1}</span>
                          {artist.name}
                        </h2>
                        {artist.images.length > 0 && (
                          <figure>
                            <img src={artist.images[0].url} alt={artist.name} />
                          </figure>
                        )}
                        <div className="card-actions justify-between items-center">
                          <span className="opacity-50 text-sm">Followers: {artist.followers.total}</span>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              }

              {simpleModeEnabled &&
                <div className="grid grid-cols-1 gap-1 lg:gap-4 lg:p-4 lg:grid-cols-3">
                  {selectedOption === 'tracks' && topTracks.map((track, index) => (
                    <div key={track.id} className="card card-bordered card-compact bg-base-300 shadow-sm">
                      <div className="card-body p-4">
                        <h2 className="card-title text-sm">
                          <span className="text-sm opacity-50">#{index + 1}</span>
                          {track.name}
                        </h2>
                        <p className="opacity-50 text-xs">
                          {showAlbumInstead ? track.album.name : track.artists[0].name}
                        </p>
                        <div className="card-actions justify-between items-center">
                          <span className="opacity-50 text-xs">Duration: {formatDuration(track.duration_ms)}</span>
                        </div>
                      </div>
                    </div>
                  ))}
                  {selectedOption === 'artists' && topArtists.map((artist, index) => (
                    <div key={artist.id} className="card card-bordered card-compact bg-base-300 shadow-sm">
                      <div className="card-body p-4">
                        <h2 className="card-title text-sm">
                          <span className="text-sm opacity-50">#{index + 1}</span>
                          {artist.name}
                        </h2>
                        <div className="card-actions justify-between items-center">
                          <span className="opacity-50 text-xs">Followers: {artist.followers.total}</span>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              }
            </div>

            <div className="lg:sticky lg:top-8 lg:self-start w-full max-w-md mt-8 lg:mt-0">
              <div className="card card-compact bg-base-100 shadow-lg p-4">
                <div className="card-body items-center text-center">
                  <img src={profileImage} alt={`${userName}'s profile`} className="w-24 h-24 rounded-full cursor-pointer" onClick={handleProfileImageClick} />
                  {showProfileDetails && (
                    <div className="mt-4">
                      <h2 className="card-title text-lg">{userName}</h2>
                      <p className="text-sm">Followers: {userFollowers}</p>
                      <p className="text-sm">Playlists: {userPlaylists}</p>
                      <p className="text-sm">Following: {userFollowing}</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        }
      </div>
    );
}

export default TopSongs;
